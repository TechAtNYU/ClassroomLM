
SET default_transaction_read_only = off;

SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;

ALTER ROLE "anon" SET "statement_timeout" TO '3s';

ALTER ROLE "authenticated" SET "statement_timeout" TO '8s';

ALTER ROLE "authenticator" SET "statement_timeout" TO '8s';

RESET ALL;


SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE OR REPLACE FUNCTION "public"."check_user_domain"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$BEGIN
  IF NOT EXISTS (
    SELECT 1
    FROM public."Allowed_Domains" ad
    WHERE NEW.email LIKE ('%@' || ad.domain)
  ) THEN
    RAISE EXCEPTION 'INCORRECT_DOMAIN';
  END IF;

  RETURN NEW;
END;$$;


ALTER FUNCTION "public"."check_user_domain"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO ''
    AS $$begin
  insert into public."Users" (id, email, full_name, avatar_url)
  values (new.id,
   new.email ,
   new.raw_user_meta_data->>'full_name',
   new.raw_user_meta_data->>'avatar_url');
  return new;
end;$$;


ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."user_in_classroom"("_classroom_id" bigint) RETURNS boolean
    LANGUAGE "sql" SECURITY DEFINER
    SET "search_path" TO 'public', 'pg_temp'
    AS $$
  SELECT EXISTS(
    SELECT 1
    FROM public."Classroom_Members"
    WHERE "Classroom_Members".classroom_id = _classroom_id
      AND "Classroom_Members".user_id = auth.uid()
  );
$$;


ALTER FUNCTION "public"."user_in_classroom"("_classroom_id" bigint) OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."Allowed_Domains" (
    "id" integer NOT NULL,
    "domain" "text" NOT NULL
);


ALTER TABLE "public"."Allowed_Domains" OWNER TO "postgres";


ALTER TABLE "public"."Allowed_Domains" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."Allowed_Domains_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."Chatroom_Members" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "chatroom_id" "uuid" NOT NULL,
    "member_id" bigint NOT NULL,
    "is_active" boolean DEFAULT true NOT NULL
);


ALTER TABLE "public"."Chatroom_Members" OWNER TO "postgres";


ALTER TABLE "public"."Chatroom_Members" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."Chatroom_Members_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."Chatrooms" (
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "classroom_id" bigint NOT NULL,
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "name" "text" NOT NULL,
    "creater_user_id" "uuid" NOT NULL,
    "ragflow_session_id" "text"
);


ALTER TABLE "public"."Chatrooms" OWNER TO "postgres";


COMMENT ON COLUMN "public"."Chatrooms"."creater_user_id" IS 'Creater of the chatroom';



CREATE TABLE IF NOT EXISTS "public"."Classroom_Members" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "classroom_id" bigint NOT NULL,
    "user_id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "ragflow_session_id" "text"
);


ALTER TABLE "public"."Classroom_Members" OWNER TO "postgres";


ALTER TABLE "public"."Classroom_Members" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."Classroom_Members_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."Classrooms" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text",
    "metadata" "jsonb",
    "admin_user_id" "uuid" DEFAULT "gen_random_uuid"(),
    "ragflow_dataset_id" "text",
    "chat_assistant_id" "text",
    "archived" boolean,
    "join_code" "text" GENERATED ALWAYS AS (SUBSTRING("md5"(("id")::"text") FROM 1 FOR 8)) STORED,
    "chatroom_assistant_id" "text"
);


ALTER TABLE "public"."Classrooms" OWNER TO "postgres";


ALTER TABLE "public"."Classrooms" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."Classroom_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."Messages" (
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "content" "text" NOT NULL,
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "is_new" boolean DEFAULT true NOT NULL,
    "member_id" bigint,
    "chatroom_id" "uuid" NOT NULL,
    "is_ask" boolean DEFAULT false NOT NULL
);


ALTER TABLE "public"."Messages" OWNER TO "postgres";


COMMENT ON COLUMN "public"."Messages"."is_new" IS 'Whether is message is sent to LLM';



CREATE TABLE IF NOT EXISTS "public"."Users" (
    "id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "email" "text" NOT NULL,
    "full_name" "text",
    "avatar_url" "text"
);


ALTER TABLE "public"."Users" OWNER TO "postgres";


ALTER TABLE ONLY "public"."Allowed_Domains"
    ADD CONSTRAINT "Allowed_Domains_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."Chatroom_Members"
    ADD CONSTRAINT "Chatroom_Members_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."Chatrooms"
    ADD CONSTRAINT "Chatrooms_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."Chatrooms"
    ADD CONSTRAINT "Chatrooms_uuid_key" UNIQUE ("id");



ALTER TABLE ONLY "public"."Classroom_Members"
    ADD CONSTRAINT "Classroom_Members_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."Classrooms"
    ADD CONSTRAINT "Classroom_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."Classrooms"
    ADD CONSTRAINT "Classrooms_id_key" UNIQUE ("id");



ALTER TABLE ONLY "public"."Messages"
    ADD CONSTRAINT "Messages_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."Users"
    ADD CONSTRAINT "Users_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."Chatroom_Members"
    ADD CONSTRAINT "Chatroom_Members_chatroom_id_fkey" FOREIGN KEY ("chatroom_id") REFERENCES "public"."Chatrooms"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."Chatroom_Members"
    ADD CONSTRAINT "Chatroom_Members_member_id_fkey" FOREIGN KEY ("member_id") REFERENCES "public"."Classroom_Members"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."Chatrooms"
    ADD CONSTRAINT "Chatrooms_classroom_id_fkey" FOREIGN KEY ("classroom_id") REFERENCES "public"."Classrooms"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."Chatrooms"
    ADD CONSTRAINT "Chatrooms_creater_user_id_fkey" FOREIGN KEY ("creater_user_id") REFERENCES "public"."Users"("id");



ALTER TABLE ONLY "public"."Classroom_Members"
    ADD CONSTRAINT "Classroom_Members_classroom_id_fkey" FOREIGN KEY ("classroom_id") REFERENCES "public"."Classrooms"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."Classroom_Members"
    ADD CONSTRAINT "Classroom_Members_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."Users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."Classrooms"
    ADD CONSTRAINT "Classroom_admin_user_id_fkey" FOREIGN KEY ("admin_user_id") REFERENCES "public"."Users"("id") ON UPDATE CASCADE ON DELETE SET NULL;



ALTER TABLE ONLY "public"."Messages"
    ADD CONSTRAINT "Messages_chatroom_id_fkey" FOREIGN KEY ("chatroom_id") REFERENCES "public"."Chatrooms"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."Messages"
    ADD CONSTRAINT "Messages_member_id_fkey" FOREIGN KEY ("member_id") REFERENCES "public"."Chatroom_Members"("id");



CREATE POLICY "Allow authenticated users to insert classroom" ON "public"."Classrooms" FOR INSERT WITH CHECK (("auth"."uid"() = "admin_user_id"));



CREATE POLICY "Allow authenticated users to select from Users" ON "public"."Users" FOR SELECT USING (("auth"."role"() = 'authenticated'::"text"));



CREATE POLICY "Allow select if user is a member of the classroom" ON "public"."Classroom_Members" FOR SELECT TO "authenticated" USING ("public"."user_in_classroom"("classroom_id"));



ALTER TABLE "public"."Allowed_Domains" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."Chatroom_Members" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."Chatrooms" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."Classroom_Members" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."Classrooms" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "Enable delete access for all users" ON "public"."Chatroom_Members" FOR DELETE USING (true);



CREATE POLICY "Enable delete access for all users" ON "public"."Messages" FOR DELETE TO "authenticated" USING (true);



CREATE POLICY "Enable delete for users based on user_id" ON "public"."Chatrooms" FOR DELETE USING ((( SELECT "auth"."uid"() AS "uid") = "creater_user_id"));



CREATE POLICY "Enable insert for authenticated users only" ON "public"."Chatroom_Members" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "public"."Chatrooms" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "public"."Messages" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "public"."Users" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable read access for all users" ON "public"."Allowed_Domains" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."Chatroom_Members" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."Chatrooms" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."Messages" FOR SELECT USING (true);



CREATE POLICY "Enable update for all users" ON "public"."Messages" FOR UPDATE USING (true) WITH CHECK (true);



ALTER TABLE "public"."Messages" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."Users" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "classroom_members_view_own" ON "public"."Classroom_Members" TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "classroom_view_for_members" ON "public"."Classrooms" FOR SELECT USING ((( SELECT "auth"."uid"() AS "uid") IN ( SELECT "cm"."user_id"
   FROM "public"."Classroom_Members" "cm"
  WHERE ("cm"."classroom_id" = "Classrooms"."id"))));



CREATE POLICY "delete-classroom" ON "public"."Classrooms" FOR DELETE USING ((( SELECT "auth"."uid"() AS "uid") IN ( SELECT "cm"."user_id"
   FROM "public"."Classroom_Members" "cm"
  WHERE ("cm"."classroom_id" = "Classrooms"."id"))));





ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";






ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."Messages";



GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";




















































































































































































GRANT ALL ON FUNCTION "public"."check_user_domain"() TO "anon";
GRANT ALL ON FUNCTION "public"."check_user_domain"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."check_user_domain"() TO "service_role";



GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";



GRANT ALL ON FUNCTION "public"."user_in_classroom"("_classroom_id" bigint) TO "anon";
GRANT ALL ON FUNCTION "public"."user_in_classroom"("_classroom_id" bigint) TO "authenticated";
GRANT ALL ON FUNCTION "public"."user_in_classroom"("_classroom_id" bigint) TO "service_role";


















GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Allowed_Domains" TO "anon";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Allowed_Domains" TO "authenticated";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Allowed_Domains" TO "service_role";



GRANT ALL ON SEQUENCE "public"."Allowed_Domains_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."Allowed_Domains_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."Allowed_Domains_id_seq" TO "service_role";



GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Chatroom_Members" TO "anon";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Chatroom_Members" TO "authenticated";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Chatroom_Members" TO "service_role";



GRANT ALL ON SEQUENCE "public"."Chatroom_Members_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."Chatroom_Members_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."Chatroom_Members_id_seq" TO "service_role";



GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Chatrooms" TO "anon";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Chatrooms" TO "authenticated";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Chatrooms" TO "service_role";



GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Classroom_Members" TO "anon";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Classroom_Members" TO "authenticated";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Classroom_Members" TO "service_role";



GRANT ALL ON SEQUENCE "public"."Classroom_Members_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."Classroom_Members_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."Classroom_Members_id_seq" TO "service_role";



GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Classrooms" TO "anon";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Classrooms" TO "authenticated";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Classrooms" TO "service_role";



GRANT ALL ON SEQUENCE "public"."Classroom_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."Classroom_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."Classroom_id_seq" TO "service_role";



GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Messages" TO "anon";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Messages" TO "authenticated";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Messages" TO "service_role";



GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Users" TO "anon";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Users" TO "authenticated";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Users" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO "service_role";



CREATE OR REPLACE TRIGGER "check_user_domain_trigger" BEFORE INSERT ON "auth"."users" FOR EACH ROW EXECUTE FUNCTION "public"."check_user_domain"();

CREATE OR REPLACE TRIGGER "on_auth_user_created" AFTER INSERT ON "auth"."users" FOR EACH ROW EXECUTE FUNCTION "public"."handle_new_user"();


























RESET ALL;

